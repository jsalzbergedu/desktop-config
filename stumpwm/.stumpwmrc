;; -*- lisp -*-

(in-package :stumpwm)

;; Start swank
(require :swank)
(swank-loader:init)
(swank:create-server :port 4444
                     :style swank:*communication-style*
                     :dont-close t)

;; Basics
(set-prefix-key (kbd "C-t"))
(setf *startup-message* NIL
      *suppress-abort-messages* t
      *shell-program* (getenv "SHELL"))

(defvar *message-filters* '("Group dumped")
  "Don't show these messages.")

(defun message (fmt &rest args)
  "Overwritten message function to allow filters"
  (let ((msg-string (apply 'format nil fmt args)))
    (unless (member msg-string *message-filters* :test #'string=)
      (echo-string (current-screen) msg-string))))

(set-module-dir
 (pathname-as-directory (concat (getenv "HOME") "/stumpwm")))

;; Modules
(load-module "ttf-fonts")
(load-module "winner-mode")
(load-module "globalwindows")
(load-module "amixer")
(load-module "swm-gaps")
(load-module "kbd-layouts")

(setf swm-gaps:*inner-gaps-size* 10
     swm-gaps:*outer-gaps-size* 15)

;; Turn on gaps
(run-commands "toggle-gaps")
;; Looks
(push "/usr/share/fonts/TTF/" xft:*font-dirs*)
(xft:cache-fonts)
(set-font (make-instance 'xft:font
                         :family "SauceCodePro Nerd Font"
                         :subfamily "Regular"
                         :size 12))

(setf *message-window-gravity* :center
      *input-window-gravity* :center
      *window-border-style* :none
      *message-window-padding* 10
      *maxsize-border-width* 5
      *normal-border-width* 5
      *transient-border-width* 2
      stumpwm::*float-window-border* 2
      stumpwm::*float-window-title-height* 5
      *mouse-focus-policy* :click)

(set-normal-gravity :center)
(set-maxsize-gravity :center)
(set-transient-gravity :center)

(set-fg-color "#eeeeee")
(set-bg-color "#1C2028")
(set-border-color "#232731")
(set-focus-color "#3B4252")
(set-unfocus-color "#232731")
(set-win-bg-color "#22272F")
(set-float-focus-color "#3B4252")
(set-float-unfocus-color "#232731")

(setf *colors* (list "#1C2028"      ; 0 black
                     "#BF616A"      ; 1 red
                     "#A3BE8C"      ; 2 green
                     "#EBCB8B"      ; 3 yellow
                     "#5E81AC"      ; 4 blue
                     "#B48EAD"      ; 5 magenta
                     "#8FBCBB"      ; 6 cyan
                     "#ECEFF4"))    ; 7 white

(defun shift-windows-forward (frames win)
  "Exchange windows through cycling frames."
  (when frames
    (let ((frame (car frames)))
      (shift-windows-forward (cdr frames)
                             (stumpwm::frame-window frame))
      (when win
        (stumpwm::pull-window win frame)))))

(defun polybar-groups ()
  "Return string representation for polybar stumpgroups module"
  (apply #'concatenate 'string
         (mapcar
          (lambda (g)
            (let* ((name (string-upcase (group-name g)))
                   (n-win (write-to-string (length (group-windows g))))
                   (display-text (cond ((string-equal name "TXT") "   TXT ")
                                       ((string-equal name "WEB") "   WEB ")
                                       ((string-equal name "EXT") "   EXT ")
                                       ((string-equal name "FLT") "   FLT ")
                                       (t (concat "   " name "  ")))))
              (if (eq g (current-group))
                  (concat "%{F#ECEFF4 B#882E3440 u#8A9899 +u}" display-text "[" n-win "] " "%{F- B- u- -u}")
                  (concat "%{F#8A9899}" display-text "[" n-win "] " "%{F-}"))))
          (sort (screen-groups (current-screen)) #'< :key #'group-number))))

(defun window-cls-present-p (win-cls &optional all-groups)
  "Tell if a window (by class) is present"
  (let ((windows (group-windows (if all-groups (current-screen) (current-group)))))
    (member win-cls (mapcar #'window-class windows) :test #'string-equal)))

(defun run-or-raise-prefer-group (cmd win-cls)
  "If there are windows in the same class, cycle in those. Otherwise call
run-or-raise with group search t."
  (if (window-cls-present-p win-cls)
      (run-or-raise cmd `(:class ,win-cls) nil T)
      (run-or-raise cmd `(:class ,win-cls) T T)))

;; Commands
(defcommand emacs () ()
  (run-shell-command "emacsclient -c"))

(defcommand firefox () ()
  (run-shell-command "firefox"))

(defcommand run-or-raise-alt-browser () ()
  (run-or-raise-prefer-group "chromium" "Chromium"))

(defcommand run-or-raise-konsole () ()
  (run-or-raise-prefer-group "konsole --notransparency --stylesheet ~/cfg/konsole/konsole.css" "konsole"))

(defcommand battery () ()
  (message (run-shell-command "bat" t)))

(defcommand refresh-stuff () ()
  (run-shell-command "sh ~/.fehbg")
  (run-commands "mode-line" "mode-line")
  (run-shell-command "xmodmap ~/.Xmodmap"))

(defcommand rotate-windows () ()
  (let* ((frames (stumpwm::head-frames (current-group) (current-head)))
         (win (stumpwm::frame-window (car (last frames)))))
    (shift-windows-forward frames win)))

(defcommand windows-left-right () ()
  "Open windows side by side"
  (run-commands "only" "vsplit"))

(defcommand windows-up-down () ()
  "Open windows up and down"
  (run-commands "only" "hsplit"))

(defcommand raise-brightness () ()
  (run-shell-command "light -A 5"))

(defcommand lower-brightness () ()
  (run-shell-command "light -U 5"))

(amixer::defvolcontrol amixer-Master-5- "Master" "5%-")
(amixer::defvolcontrol amixer-Master-5+ "Master" "5%+")

(defcommand bbq (search-term) ((:string " "))
  "Play via bbq"
  (if search-term
      (run-shell-command (format nil "bbq ~A " search-term))))

(defun rofi (mode)
  (run-shell-command (concat "rofi -show " mode " -m " (write-to-string (head-number (current-head))))))

(defcommand rofi-run () () (rofi "run -sidebar-mode"))
(defcommand rofi-window () () (rofi "window"))
(defcommand rofi-windowcd () () (rofi "windowcd"))

;; All the keys
(define-key *top-map* (kbd "C-M-Left") "exec bbq :prev")
(define-key *top-map* (kbd "C-M-Right") "exec bbq :next")
(define-key *top-map* (kbd "C-M-SPC") "exec bbq :toggle")
(define-key *top-map* (kbd "s-t") "exec konsole --notransparency --stylesheet ~/cfg/konsole/konsole.css")
(define-key *top-map* (kbd "s-x") "exec xkill")
(define-key *top-map* (kbd "s-w") "exec konsole --notransparency --stylesheet ~/cfg/konsole/konsole.css -e htop ")

(define-key *root-map* (kbd "l") "move-focus right")
(define-key *root-map* (kbd "h") "move-focus left")
(define-key *root-map* (kbd "j") "move-focus down")
(define-key *root-map* (kbd "k") "move-focus up")

(defvar *toggle-map* (make-sparse-keymap))
(define-key *root-map* (kbd "t") '*toggle-map*)
(define-key *toggle-map* (kbd "g") "toggle-gaps")
(define-key *toggle-map* (kbd "f") "float-this")
(define-key *toggle-map* (kbd "u") "unfloat-this")
(define-key *toggle-map* (kbd "a") "toggle-always-show")
(define-key *toggle-map* (kbd "t") "toggle-always-on-top")

(define-key *top-map* (kbd "s-r") "rotate-windows")
(define-key *top-map* (kbd "s-v") "windows-left-right")
(define-key *top-map* (kbd "s-h") "windows-up-down")
(define-key *top-map* (kbd "s-f") "only")
(define-key *top-map* (kbd "s-c") "fclear")
(define-key *top-map* (kbd "s-l") "exec lock")
(define-key *top-map* (kbd "s-SPC") "bbq")
(define-key *top-map* (kbd "s-S-SPC") "switch-keyboard-layout")

(define-key *top-map* (kbd "XF86Launch5") "gselect 1")
(define-key *top-map* (kbd "XF86Launch6") "gselect 2")
(define-key *top-map* (kbd "XF86Launch7") "gselect 3")

(define-key *top-map* (kbd "XF86Launch8") "lower-brightness")
(define-key *top-map* (kbd "XF86Launch9") "raise-brightness")

(define-key *top-map* (kbd "XF86MonBrightnessUp") "raise-brightness")
(define-key *top-map* (kbd "XF86MonBrightnessDown") "lower-brightness")

(define-key *top-map* (kbd "XF86AudioLowerVolume") "amixer-Master-5-")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "amixer-Master-5+")
(define-key *top-map* (kbd "XF86AudioMute") "amixer-Master-toggle")

(define-key *root-map* (kbd "XF86Launch5") "pull 0")
(define-key *root-map* (kbd "XF86Launch6") "pull 1")
(define-key *root-map* (kbd "XF86Launch7") "pull 2")
(define-key *root-map* (kbd "XF86Launch8") "pull 3")
(define-key *root-map* (kbd "XF86Launch9") "pull 4")

;; Lazy people
(define-key *top-map* (kbd "KP_Up") "ratrelwarp 0 -10")
(define-key *top-map* (kbd "KP_Down") "ratrelwarp 0 10")
(define-key *top-map* (kbd "KP_Left") "ratrelwarp -10 0")
(define-key *top-map* (kbd "KP_Right") "ratrelwarp 10 0")
(define-key *top-map* (kbd "KP_Begin") "ratclick")

(define-key *top-map* (kbd "s-KP_Up") "ratrelwarp 0 -100")
(define-key *top-map* (kbd "s-KP_Down") "ratrelwarp 0 100")
(define-key *top-map* (kbd "s-KP_Left") "ratrelwarp -100 0")
(define-key *top-map* (kbd "s-KP_Right") "ratrelwarp 100 0")
(define-key *top-map* (kbd "s-KP_Begin") "ratclick 3")

(define-key *root-map* (kbd "c") "exec kitty")
(define-key *root-map* (kbd "C-c") "exec kitty")
(define-key *root-map* (kbd "C-v") "run-or-raise-alt-browser")
(define-key *root-map* (kbd "C-e") "emacs")
(define-key *root-map* (kbd "C-r") "rofi-run")
(define-key *root-map* (kbd "e") "emacs")
(define-key *root-map* (kbd "d") "firefox")
(define-key *root-map* (kbd "!") "run-shell-command")
(define-key *root-map* (kbd "b") "windowlist")
(define-key *root-map* (kbd "q") "refresh-stuff")
(define-key *root-map* (kbd "TAB") "pull-hidden-other")
(define-key *root-map* (kbd "p") "battery")

(define-key *groups-map* (kbd "Right") "gnext")
(define-key *groups-map* (kbd "Left") "gprev")
(define-key *groups-map* (kbd "M-Right") "gnext-with-window")
(define-key *groups-map* (kbd "M-Left") "gprev-with-window")
(define-key *groups-map* (kbd "b") "global-windowlist")

;; Init
(update-color-map (current-screen))
(run-shell-command "sh ~/.screenlayout/multi-vga.sh")
(run-shell-command "xmodmap ~/.Xmodmap")
(run-shell-command "xset b off")

;; Groups
(setf (group-name (car (screen-groups (current-screen)))) "txt")
(run-commands "gnewbg web" "gnewbg ext" "gnewbg-float flt")

(clear-window-placement-rules)

(define-frame-preference "flt"
    (nil nil t :class "Syncthing GTK"))

;; Programs
(run-shell-command "~/swapcaps.sh")
(run-shell-command "compton")
(run-shell-command "dunst")
(run-shell-command "redshift")
(run-shell-command "mpm-play")
(run-shell-command "gnome-encfs-manager")
(run-shell-command "megasync")
(run-shell-command "kdeconnect-indicator")
(run-shell-command "polybar screen --reload")

;; Hooks
(add-hook *post-command-hook* (lambda (command)
                                (when (member command winner-mode:*default-commands*)
                                  (winner-mode:dump-group-to-file))))

;; Update polybar group indicator
(add-hook *new-window-hook* (lambda (win) (run-shell-command "polybar-msg hook stumpwmgroups 1")))
(add-hook *destroy-window-hook* (lambda (win) (run-shell-command "polybar-msg hook stumpwmgroups 1")))
(add-hook *focus-window-hook* (lambda (win lastw) (run-shell-command "polybar-msg hook stumpwmgroups 1")))
(add-hook *focus-group-hook* (lambda (grp lastg) (run-shell-command "polybar-msg hook stumpwmgroups 1")))
